import type { MetricAdvice } from '../components/ui/MetricExplanationModal';
import type { ProjectInputs, ProjectionResult } from '../types';
import { formatCurrency } from './utils';
import { ADVICE_THRESHOLDS } from './constants';

// ============================================================================
// CONSEILS POUR DSCR (Debt Service Coverage Ratio)
// ============================================================================

function extractValue(input: any): number {
  if (typeof input === 'object' && input !== null && 'value' in input) {
    if ('range' in input && input.range && input.range.useRange) {
      return input.range.default as number;
    }
    return input.value as number;
  }
  return input as number;
}

export function getDSCRAdvice(
  minDSCR: number,
  inputs: ProjectInputs,
  projection?: ProjectionResult
): MetricAdvice[] {
  const advice: MetricAdvice[] = [];
  
  // Si DSCR est bon, f√©licitations
  if (minDSCR >= 1.5) {
    advice.push({
      icon: '‚úÖ',
      action: 'Excellent DSCR !',
      impact: 'Ton ratio est solide. Les banques adorent voir un DSCR > 1.5. Tu as une belle marge de s√©curit√©.',
      priority: 'low',
    });
    return advice;
  }
  
  if (minDSCR >= 1.25) {
    advice.push({
      icon: '‚úì',
      action: 'DSCR acceptable',
      impact: 'Tu respectes le seuil bancaire standard. Pour plus de s√©curit√©, vise 1.4+.',
      priority: 'low',
    });
    return advice;
  }

  // DSCR probl√©matique - calculer les solutions
  const purchasePrice = extractValue(inputs.financing.purchasePrice);
  const currentDownPayment = extractValue(inputs.financing.downPayment);
  const interestRate = extractValue(inputs.financing.interestRate);
  const amortizationYears = extractValue(inputs.financing.amortizationYears);
  const loanAmount = purchasePrice - currentDownPayment;
  
  // Solution 1 : Augmenter la mise de fonds
  const targetDSCR = 1.25;
  const currentNOI = projection?.years[0]?.noi || 0;
  const maxDebtService = currentNOI / targetDSCR;
  
  // Calculer le montant de pr√™t maximum pour atteindre DSCR 1.25
  const paymentsPerYear = 12; // Simplifi√©
  const periodicRate = interestRate / 100 / paymentsPerYear;
  const totalPayments = amortizationYears * paymentsPerYear;
  
  let maxLoanAmount = 0;
  if (periodicRate === 0) {
    maxLoanAmount = (maxDebtService / paymentsPerYear) * totalPayments;
  } else {
    maxLoanAmount =
      maxDebtService /
      ((periodicRate * Math.pow(1 + periodicRate, totalPayments)) /
        (Math.pow(1 + periodicRate, totalPayments) - 1) /
        paymentsPerYear);
  }
  
  const additionalDownPaymentNeeded = Math.max(0, loanAmount - maxLoanAmount);
  
  if (additionalDownPaymentNeeded > 0) {
    const newDownPayment = currentDownPayment + additionalDownPaymentNeeded;
    const newDownPaymentPercent = (newDownPayment / purchasePrice) * 100;
    
    advice.push({
      icon: 'üí∞',
      action: 'Augmenter la mise de fonds',
      impact: `Passe de ${formatCurrency(currentDownPayment)} √† ${formatCurrency(newDownPayment)} (${newDownPaymentPercent.toFixed(1)}% du prix). Cela r√©duira ton service de dette et am√©liorera ton DSCR √† ~${targetDSCR.toFixed(2)}.`,
      priority: 'high',
    });
  }
  
  // Solution 2 : Augmenter les revenus
  const currentRevenue = projection?.years[0]?.revenue || extractValue(inputs.revenue.averageDailyRate) * 
    (extractValue(inputs.revenue.occupancyRate) / 100) * (inputs.revenue.daysPerYear || 365);
  const currentExpenses = projection?.years[0]?.expenses || 0;
  const currentDebtService = projection?.years[0]?.debtService || 0;
  
  const targetNOI = currentDebtService * targetDSCR;
  const revenueIncrease = targetNOI - currentNOI;
  const revenueIncreasePercent = (revenueIncrease / currentRevenue) * 100;
  
  if (revenueIncrease > 0 && revenueIncreasePercent < 50) {
    const currentADR = extractValue(inputs.revenue.averageDailyRate);
    const newADR = currentADR * (1 + revenueIncreasePercent / 100);
    const adrIncrease = newADR - currentADR;
    
    advice.push({
      icon: 'üìà',
      action: 'Augmenter les revenus',
      impact: `Augmente ton ADR de ${formatCurrency(adrIncrease)} (de ${formatCurrency(currentADR)} √† ${formatCurrency(newADR)}) ou am√©liore ton taux d'occupation. Cela augmenterait tes revenus de ${revenueIncreasePercent.toFixed(1)}% et ton DSCR √† ~${targetDSCR.toFixed(2)}.`,
      priority: revenueIncreasePercent < 15 ? 'high' : 'medium',
    });
  }
  
  // Solution 3 : R√©duire les d√©penses
  const expenseReduction = revenueIncrease;
  const expenseReductionPercent = (expenseReduction / currentExpenses) * 100;
  
  if (expenseReduction > 0 && expenseReductionPercent < 40) {
    advice.push({
      icon: '‚úÇÔ∏è',
      action: 'R√©duire les d√©penses op√©rationnelles',
      impact: `R√©duis tes d√©penses de ${formatCurrency(expenseReduction)} (${expenseReductionPercent.toFixed(1)}%). Examine tes frais de gestion, d'entretien et d'assurance pour trouver des √©conomies.`,
      priority: expenseReductionPercent < 20 ? 'medium' : 'low',
    });
  }
  
  // Solution 4 : N√©gocier le taux d'int√©r√™t
  const newRate = interestRate - 0.5;
  if (newRate > 0) {
    advice.push({
      icon: 'üè¶',
      action: 'N√©gocier un meilleur taux d\'int√©r√™t',
      impact: `Un taux √† ${newRate.toFixed(2)}% au lieu de ${interestRate.toFixed(2)}% r√©duirait ton service de dette. Magasine chez plusieurs pr√™teurs ou utilise un courtier.`,
      priority: 'medium',
    });
  }

  return advice;
}

// ============================================================================
// CONSEILS POUR LTV (Loan-to-Value)
// ============================================================================

export function getLTVAdvice(
  maxLTV: number,
  inputs: ProjectInputs
): MetricAdvice[] {
  const advice: MetricAdvice[] = [];
  
  // Si LTV est excellent
  if (maxLTV <= 65) {
    advice.push({
      icon: 'üåü',
      action: 'LTV excellent !',
      impact: 'Tu as une forte √©quit√© dans la propri√©t√©. Cela te donne flexibilit√© et s√©curit√©. Tu pourrais m√™me refinancer facilement si n√©cessaire.',
      priority: 'low',
    });
    return advice;
  }
  
  // Si LTV est bon
  if (maxLTV <= 75) {
    advice.push({
      icon: '‚úì',
      action: 'LTV optimal',
      impact: 'Tu es dans la zone id√©ale pour les banques. Bel √©quilibre entre levier et s√©curit√©.',
      priority: 'low',
    });
    return advice;
  }
  
  // LTV probl√©matique
  const purchasePrice = extractValue(inputs.financing.purchasePrice);
  const currentDownPayment = extractValue(inputs.financing.downPayment);
  
  // Solution 1 : Augmenter la mise de fonds pour atteindre 75% LTV
  const targetLTV = 75;
  const targetLoanAmount = purchasePrice * (targetLTV / 100);
  const targetDownPayment = purchasePrice - targetLoanAmount;
  const additionalDownPayment = targetDownPayment - currentDownPayment;
  const targetDownPaymentPercent = (targetDownPayment / purchasePrice) * 100;
  
  if (additionalDownPayment > 0) {
    advice.push({
      icon: 'üí∞',
      action: 'Augmenter la mise de fonds',
      impact: `Ajoute ${formatCurrency(additionalDownPayment)} √† ta mise de fonds (total ${formatCurrency(targetDownPayment)} = ${targetDownPaymentPercent.toFixed(1)}%) pour atteindre ${targetLTV}% LTV optimal.`,
      priority: maxLTV > 85 ? 'high' : 'medium',
    });
  }
  
  // Solution 2 : Acc√©l√©rer le remboursement du capital
  advice.push({
    icon: 'üèÉ',
    action: 'Acc√©l√©rer le remboursement',
    impact: 'Fais des paiements additionnels sur le capital quand tu as des cashflows positifs. Ton LTV diminuera plus rapidement et tu b√¢tiras de l\'√©quit√©.',
    priority: 'medium',
  });
  
  // Solution 3 : Refinancer apr√®s appr√©ciation
  const appreciationRate = extractValue(inputs.financing.annualAppreciationRate);
  if (appreciationRate > 0) {
    const yearsNeeded = Math.ceil(Math.log((maxLTV / targetLTV)) / Math.log(1 + appreciationRate / 100));
    
    advice.push({
      icon: 'üìä',
      action: 'Profiter de l\'appr√©ciation',
      impact: `Avec ${appreciationRate.toFixed(1)}% d'appr√©ciation annuelle, ton LTV devrait descendre √† ${targetLTV}% naturellement en ~${yearsNeeded} ans gr√¢ce √† la hausse de valeur et au remboursement du capital.`,
      priority: 'low',
    });
  }
  
  // Avertissement si LTV tr√®s √©lev√©
  if (maxLTV > 85) {
    advice.push({
      icon: '‚ö†Ô∏è',
      action: 'Attention au risque',
      impact: 'Un LTV > 85% limite tes options de refinancement et augmente ton risque en cas de baisse du march√©. Priorise la r√©duction de ta dette.',
      priority: 'high',
    });
  }

  return advice;
}

// ============================================================================
// CONSEILS POUR BREAK-EVEN OCCUPANCY
// ============================================================================

export function getBreakEvenOccupancyAdvice(
  breakEvenOccupancy: number,
  inputs: ProjectInputs
): MetricAdvice[] {
  const advice: MetricAdvice[] = [];
  
  const currentOccupancy = extractValue(inputs.revenue.occupancyRate);
  const safetyMargin = currentOccupancy - breakEvenOccupancy;
  
  // Si marge excellente
  if (safetyMargin >= 25) {
    advice.push({
      icon: 'üéØ',
      action: 'Marge de s√©curit√© excellente !',
      impact: `Tu as ${safetyMargin.toFixed(1)}% de marge. M√™me avec une baisse significative d'occupation, tu restes profitable.`,
      priority: 'low',
    });
    return advice;
  }
  
  // Si marge acceptable
  if (safetyMargin >= 15) {
    advice.push({
      icon: '‚úì',
      action: 'Bonne marge de s√©curit√©',
      impact: `${safetyMargin.toFixed(1)}% de marge. C'est sain, mais surveille ton taux d'occupation.`,
      priority: 'low',
    });
    return advice;
  }
  
  // Marge faible ou n√©gative
  const currentADR = extractValue(inputs.revenue.averageDailyRate);
  const daysPerYear = inputs.revenue.daysPerYear || 365;
  
  // Solution 1 : Augmenter l'ADR
  const targetMargin = 20; // Viser 20% de marge
  const targetOccupancy = breakEvenOccupancy + targetMargin;
  const adrIncrease = ((targetOccupancy - currentOccupancy) / currentOccupancy) * currentADR;
  const newADR = currentADR + adrIncrease;
  
  if (adrIncrease > 0) {
    advice.push({
      icon: 'üíµ',
      action: 'Augmenter ton tarif moyen (ADR)',
      impact: `Augmente ton ADR de ${formatCurrency(Math.abs(adrIncrease))} (de ${formatCurrency(currentADR)} √† ${formatCurrency(newADR)}) pour am√©liorer ta marge de s√©curit√© sans changer l'occupation.`,
      priority: safetyMargin < 10 ? 'high' : 'medium',
    });
  }
  
  // Solution 2 : R√©duire les d√©penses
  const breakEvenRevenue = breakEvenOccupancy / 100 * daysPerYear * currentADR;
  const currentRevenue = currentOccupancy / 100 * daysPerYear * currentADR;
  const expenseReduction = (currentRevenue - breakEvenRevenue) * 0.2; // 20% des revenus exc√©dentaires
  
  if (expenseReduction > 0) {
    advice.push({
      icon: '‚úÇÔ∏è',
      action: 'Optimiser les d√©penses',
      impact: `R√©duis tes d√©penses de ${formatCurrency(expenseReduction)}/an. Cela abaisserait ton break-even et augmenterait ta marge de s√©curit√©.`,
      priority: 'high',
    });
  }
  
  // Solution 3 : Am√©liorer le marketing
  advice.push({
    icon: 'üì±',
    action: 'Investir dans le marketing',
    impact: 'Am√©liore ton r√©f√©rencement Airbnb/VRBO, tes photos, et ta description. Un meilleur classement peut augmenter ton taux d\'occupation de 5-15%.',
    priority: safetyMargin < 10 ? 'high' : 'medium',
  });
  
  // Solution 4 : R√©duire le service de dette
  const currentDownPayment = extractValue(inputs.financing.downPayment);
  const purchasePrice = extractValue(inputs.financing.purchasePrice);
  const downPaymentIncrease = purchasePrice * 0.05; // Augmenter de 5%
  const newDownPayment = currentDownPayment + downPaymentIncrease;
  
  advice.push({
    icon: 'üí∞',
    action: 'Augmenter la mise de fonds',
    impact: `Passe √† ${formatCurrency(newDownPayment)} de mise de fonds (${((newDownPayment / purchasePrice) * 100).toFixed(1)}%). Cela r√©duira ton service de dette et ton break-even.`,
    priority: 'medium',
  });
  
  // Avertissement si marge n√©gative
  if (safetyMargin < 0) {
    advice.push({
      icon: 'üö®',
      action: 'URGENT : Marge n√©gative !',
      impact: `Ton taux d'occupation pr√©vu (${currentOccupancy}%) est SOUS le break-even (${breakEvenOccupancy.toFixed(1)}%). Tu perdras de l'argent chaque mois. R√©vise tes hypoth√®ses imm√©diatement !`,
      priority: 'high',
    });
  }

  return advice;
}

// ============================================================================
// CONSEILS POUR MOIC (Multiple on Invested Capital)
// ============================================================================

export function getMOICAdvice(
  moic: number,
  year: number,
  inputs: ProjectInputs,
  _projection?: ProjectionResult
): MetricAdvice[] {
  const advice: MetricAdvice[] = [];
  
  // Si MOIC est excellent
  if (moic >= ADVICE_THRESHOLDS.MOIC.EXCELLENT) {
    advice.push({
      icon: 'üöÄ',
      action: 'MOIC excellent !',
      impact: `Un multiple de ${moic.toFixed(2)}x sur ${year} ans est exceptionnel. Tu g√©n√®res ${((moic - 1) * 100).toFixed(0)}% de profit sur ton investissement total.`,
      priority: 'low',
    });
    return advice;
  }
  
  // Si MOIC est bon
  if (moic >= ADVICE_THRESHOLDS.MOIC.GOOD) {
    advice.push({
      icon: '‚úÖ',
      action: 'Bon MOIC',
      impact: `Un multiple de ${moic.toFixed(2)}x est solide. Tu doubles ton investissement sur ${year} ans.`,
      priority: 'low',
    });
    return advice;
  }
  
  // Si MOIC est acceptable mais perfectible
  if (moic >= ADVICE_THRESHOLDS.MOIC.ACCEPTABLE) {
    advice.push({
      icon: '‚ö†Ô∏è',
      action: 'MOIC acceptable mais peut √™tre am√©lior√©',
      impact: `Avec ${moic.toFixed(2)}x, tu es profitable mais en-dessous du seuil optimal (${ADVICE_THRESHOLDS.MOIC.GOOD}x). Sur ${year} ans, ton profit est de ${((moic - 1) * 100).toFixed(0)}%.`,
      priority: 'medium',
    });
  } else {
    // MOIC n√©gatif - perte
    advice.push({
      icon: 'üö®',
      action: 'MOIC n√©gatif - PERTE',
      impact: `Avec ${moic.toFixed(2)}x, tu perds de l'argent sur cet investissement. Une vente √† l'ann√©e ${year} n'est pas rentable.`,
      priority: 'high',
    });
  }
  
  // Solutions pour am√©liorer le MOIC
  const currentADR = extractValue(inputs.revenue.averageDailyRate);
  
  // Solution 1 : Augmenter les revenus
  const revenueIncreaseNeeded = ADVICE_THRESHOLDS.REVENUE_INCREASE_TARGET;
  const newADR = currentADR * (1 + revenueIncreaseNeeded / 100);
  
  advice.push({
    icon: 'üíµ',
    action: 'Augmenter tes revenus',
    impact: `Passe ton ADR de ${formatCurrency(currentADR)} √† ${formatCurrency(newADR)} (+${revenueIncreaseNeeded}%). Cela am√©liorerait significativement ton MOIC en augmentant tes cashflows cumul√©s.`,
    priority: moic < ADVICE_THRESHOLDS.MOIC.ACCEPTABLE ? 'high' : 'medium',
  });
  
  // Solution 2 : R√©duire les co√ªts initiaux
  const currentDownPayment = extractValue(inputs.financing.downPayment);
  
  if (moic < 1.5) { // Entre 1.0 et 2.0
    advice.push({
      icon: 'üí∞',
      action: 'Optimiser ton financement',
      impact: `R√©duis ta mise de fonds initiale (actuellement ${formatCurrency(currentDownPayment)}) pour augmenter ton effet de levier. Attention : cela augmente aussi le risque et peut impacter ton DSCR.`,
      priority: 'medium',
    });
  }
  
  // Solution 3 : Vendre plus tard
  if (year < 10 && moic < ADVICE_THRESHOLDS.MOIC.GOOD) {
    advice.push({
      icon: '‚è≥',
      action: 'Conserver plus longtemps',
      impact: `√Ä l'ann√©e ${year}, ton MOIC n'a pas atteint son potentiel. Garde la propri√©t√© plus longtemps pour accumuler plus de cashflows et b√©n√©ficier de l'appr√©ciation.`,
      priority: 'high',
    });
  }
  
  // Solution 4 : R√©duire les d√©penses
  advice.push({
    icon: '‚úÇÔ∏è',
    action: 'Optimiser les d√©penses',
    impact: 'R√©duis tes co√ªts op√©rationnels et CAPEX. Chaque dollar √©conomis√© am√©liore directement ton profit net et ton MOIC.',
    priority: 'medium',
  });
  
  return advice;
}

// ============================================================================
// CONSEILS POUR TRI (Taux de Rendement Interne / IRR)
// ============================================================================

export function getTRIAdvice(
  irr: number,
  year: number,
  inputs: ProjectInputs,
  _projection?: ProjectionResult
): MetricAdvice[] {
  const advice: MetricAdvice[] = [];
  
  // Si TRI est excellent
  if (irr >= ADVICE_THRESHOLDS.TRI.EXCELLENT) {
    advice.push({
      icon: 'üåü',
      action: 'TRI exceptionnel !',
      impact: `Un TRI de ${irr.toFixed(1)}% est remarquable. Tu surpasses largement les indices boursiers et l'immobilier traditionnel.`,
      priority: 'low',
    });
    return advice;
  }
  
  // Si TRI est bon
  if (irr >= ADVICE_THRESHOLDS.TRI.GOOD) {
    advice.push({
      icon: '‚úÖ',
      action: 'Excellent TRI',
      impact: `${irr.toFixed(1)}% est un excellent rendement. Tu bats la plupart des investissements traditionnels.`,
      priority: 'low',
    });
    return advice;
  }
  
  // Si TRI est acceptable
  if (irr >= ADVICE_THRESHOLDS.TRI.ACCEPTABLE) {
    advice.push({
      icon: '‚úì',
      action: 'TRI acceptable',
      impact: `${irr.toFixed(1)}% est correct mais peut √™tre am√©lior√©. Vise ${ADVICE_THRESHOLDS.TRI.GOOD}%+ pour un investissement locatif court terme optimal.`,
      priority: 'low',
    });
  } else if (irr >= 0) {
    // TRI faible
    advice.push({
      icon: '‚ö†Ô∏è',
      action: 'TRI sous-optimal',
      impact: `Avec ${irr.toFixed(1)}%, ton rendement annualis√© est faible. Tu pourrais obtenir mieux avec des placements moins risqu√©s.`,
      priority: 'high',
    });
  } else {
    // TRI n√©gatif
    advice.push({
      icon: 'üö®',
      action: 'TRI n√©gatif - PERTE',
      impact: `Un TRI de ${irr.toFixed(1)}% signifie que tu perds de l'argent chaque ann√©e. Cet investissement n'est pas viable.`,
      priority: 'high',
    });
  }
  
  // Solutions pour am√©liorer le TRI
  
  // Solution 1 : Am√©liorer les cashflows pr√©coces
  if (irr < ADVICE_THRESHOLDS.TRI.GOOD) {
    advice.push({
      icon: 'üìà',
      action: 'Maximiser les cashflows d√®s le d√©but',
      impact: 'Le TRI favorise les gains pr√©coces. Augmente ton ADR et ton taux d\'occupation rapidement. Minimise les r√©novations post-achat.',
      priority: 'high',
    });
  }
  
  // Solution 2 : Optimiser le moment de sortie
  if (year < 5 && irr < 12) {
    advice.push({
      icon: '‚è∞',
      action: 'Attendre avant de vendre',
      impact: `Vendre √† l'ann√©e ${year} est pr√©matur√©. Les premi√®res ann√©es sont impact√©es par les co√ªts initiaux. Vendre entre 7-12 ans optimise souvent le TRI.`,
      priority: 'high',
    });
  } else if (year > 15 && irr < 12) {
    advice.push({
      icon: 'üéØ',
      action: 'Envisager une vente plus t√¥t',
      impact: `Apr√®s ${year} ans, les rendements diminuent. Une vente plus t√¥t (10-15 ans) pourrait optimiser ton TRI en √©vitant les CAPEX majeurs.`,
      priority: 'medium',
    });
  }
  
  // Solution 3 : R√©duire l'investissement initial
  const currentDownPayment = extractValue(inputs.financing.downPayment);
  const purchasePrice = extractValue(inputs.financing.purchasePrice);
  const downPaymentPercent = (currentDownPayment / purchasePrice) * 100;
  
  if (downPaymentPercent > 30 && irr < 15) {
    advice.push({
      icon: 'üí∞',
      action: 'Optimiser ton effet de levier',
      impact: `Ta mise de fonds de ${downPaymentPercent.toFixed(0)}% est √©lev√©e. R√©duire √† 25-30% am√©liorerait ton TRI en diminuant le capital immobilis√©.`,
      priority: 'medium',
    });
  }
  
  // Solution 4 : Augmenter les revenus
  const currentADR = extractValue(inputs.revenue.averageDailyRate);
  const revenueIncrease = ADVICE_THRESHOLDS.TRI_REVENUE_INCREASE_SUGGESTION;
  const newADR = currentADR * (1 + revenueIncrease / 100);
  
  advice.push({
    icon: 'üíµ',
    action: 'Augmenter le tarif journalier',
    impact: `Passe de ${formatCurrency(currentADR)} √† ${formatCurrency(newADR)} (+${revenueIncrease}%). Des revenus plus √©lev√©s d√®s le d√©but boostent significativement le TRI.`,
    priority: irr < ADVICE_THRESHOLDS.TRI.ACCEPTABLE ? 'high' : 'medium',
  });
  
  // Solution 5 : N√©gocier le financement
  const interestRate = extractValue(inputs.financing.interestRate);
  if (interestRate > 4.5 && irr < ADVICE_THRESHOLDS.TRI.GOOD) {
    const betterRate = interestRate - 0.5;
    advice.push({
      icon: 'üè¶',
      action: 'N√©gocier un meilleur taux',
      impact: `Ton taux actuel (${interestRate.toFixed(2)}%) p√®se sur ton TRI. Un taux √† ${betterRate.toFixed(2)}% lib√©rerait plus de cashflow et am√©liorerait ton rendement.`,
      priority: 'medium',
    });
  }
  
  return advice;
}

// ============================================================================
// FONCTION UTILITAIRE POUR OBTENIR LES EXPLICATIONS
// ============================================================================

export function getMetricExplanation(metric: 'dscr' | 'ltv' | 'breakeven' | 'moic' | 'tri'): string {
  switch (metric) {
    case 'dscr':
      return 'Le DSCR (Debt Service Coverage Ratio) mesure ta capacit√© √† payer ton service de dette. Il compare ton revenu net d\'exploitation (NOI) √† tes paiements hypoth√©caires annuels. Les banques exigent g√©n√©ralement un minimum de 1.25, ce qui signifie que ton NOI doit √™tre au moins 25% sup√©rieur √† ton service de dette.';
    
    case 'ltv':
      return 'Le LTV (Loan-to-Value) est le ratio entre ton pr√™t hypoth√©caire et la valeur de la propri√©t√©. Un LTV √©lev√© signifie moins d\'√©quit√© et plus de risque. Les banques pr√©f√®rent voir un LTV ‚â§ 75% pour les immeubles locatifs, car cela garantit que tu as suffisamment d\'√©quit√© en cas de baisse du march√©.';
    
    case 'breakeven':
      return 'Le taux d\'occupation break-even est le niveau minimum d\'occupation n√©cessaire pour couvrir tes d√©penses et ton service de dette (cashflow = 0). La diff√©rence entre ton occupation pr√©vue et ton break-even est ta marge de s√©curit√©. Plus cette marge est grande, plus tu peux absorber des p√©riodes creuses.';
    
    case 'moic':
      return 'Le MOIC (Multiple on Invested Capital) mesure combien de fois tu r√©cup√®res ton investissement initial. Un MOIC de 2.0x signifie que tu doubles ton argent. Il se calcule en divisant le profit net par l\'investissement total (mise de fonds + CAPEX). C\'est une m√©trique cl√© pour √©valuer le retour absolu d\'un investissement immobilier.';
    
    case 'tri':
      return 'Le TRI (Taux de Rendement Interne) ou IRR mesure le rendement annualis√© de ton investissement en tenant compte de tous les cashflows et du timing. Un TRI de 15% signifie que ton argent cro√Æt de 15% par an en moyenne. Le TRI favorise les gains pr√©coces et p√©nalise les sorties tardives. C\'est LA m√©trique pour comparer diff√©rents investissements.';
  }
}

